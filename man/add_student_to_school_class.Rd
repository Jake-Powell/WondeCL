% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/manual_class_list_changes.R
\name{add_student_to_school_class}
\alias{add_student_to_school_class}
\alias{update_student_class}
\alias{update_class_name}
\alias{update_school_name}
\alias{update_class_teacher}
\alias{remove_class}
\alias{remove_student_from_class}
\title{functions to make manual changes to a cleaned class list}
\usage{
add_student_to_school_class(
  data,
  first_name,
  last_name,
  URN,
  class_name,
  DoB = NA,
  UPN = NA,
  URNColumn = "URN",
  FirstNameColumn = "Pupil First Name",
  LastNameColumn = "Pupil Last Name",
  ClassNameColumn = "Class Name",
  DoBColumn = "DoB",
  UPNColumn = "UPN"
)

update_student_class(
  data,
  URN,
  first_name,
  last_name,
  class_name = NA,
  new_class_name,
  SchoolNameColumn = "School name",
  URNColumn = "URN",
  ClassNameColumn = "Class Name",
  FirstNameColumn = "Pupil First Name",
  LastNameColumn = "Pupil Last Name",
  TeacherColumn = "Main Teacher Name",
  TeacherFNColumn = "Main Teacher First Name",
  TeacherLNColumn = "Main Teacher Last Name",
  verbose = F
)

update_class_name(
  data,
  URN,
  class_name,
  new_name,
  SchoolNameColumn = "School name",
  URNColumn = "URN",
  ClassNameColumn = "Class Name",
  verbose = F
)

update_school_name(
  data,
  URN,
  new_name,
  SchoolNameColumn = "School name",
  URNColumn = "URN"
)

update_class_teacher(
  data,
  URN,
  class_name,
  first_name,
  last_name,
  new_name = paste0(first_name, " ", last_name),
  SchoolNameColumn = "School name",
  URNColumn = "URN",
  ClassNameColumn = "Class Name",
  TeacherColumn = "Main Teacher Name",
  TeacherFNColumn = "Main Teacher First Name",
  TeacherLNColumn = "Main Teacher Last Name",
  verbose = F
)

remove_class(
  data,
  URN,
  class_name,
  URNColumn = "URN",
  ClassNameColumn = "Class Name",
  verbose = F
)

remove_student_from_class(
  data,
  URN,
  student_id,
  class_name,
  URNColumn = "URN",
  ClassNameColumn = "Class Name",
  StudentIDColumn = "StudentId",
  verbose = F
)
}
\arguments{
\item{data}{class list}

\item{first_name}{the first name of the student/teacher to be added/updated/removed from the class list.}

\item{last_name}{the last name (surname) of the student/teacher to be added/updated/removed from the class list.}

\item{URN}{of the school whose school/class/teacher/student is to be updated. Used to identify class list record/s.}

\item{class_name}{of the class to be added/updated/removed from the class list.}

\item{DoB}{of the student to be added/updated/removed from the class list.}

\item{URNColumn}{URN column in `data`. Default is 'URN'.}

\item{FirstNameColumn}{student first name column in `data`. Default is "Pupil First Name".}

\item{LastNameColumn}{student last name column in `data`. Default is "Pupil Last Name".}

\item{ClassNameColumn}{class name column in `data`. Default is 'Class Name'.}

\item{DoBColumn}{student DoB column in `data`. Default is 'DoB'.}

\item{UPNColumn}{UPN column in `data`. Default is 'UPN'.}

\item{new_class_name}{only used in `update_student_class()` to denote the class that the student is moving too (this is also used to obtain the teacher's name in the new class).}

\item{SchoolNameColumn}{school name column in `data`. Default is 'School Name'.}

\item{TeacherColumn}{teacher name (first and last name combined) column in `data`. Default is 'Main Teacher Name'.}

\item{TeacherFNColumn}{teacher first name column in `data`. Default is "Main Teacher First Name".}

\item{TeacherLNColumn}{teacher last name column in `data`. Default is "Main Teacher Last Name".}

\item{verbose}{flag (TRUE/FALSE) for whether console messages are printed.}

\item{new_name}{the new school/class/teacher (first + last) name to be added to the class list.}

\item{student_id}{the student id/s of students to be removed from the class list.}

\item{StudentIDColumn}{first name column in `data`. Default is "StudentId".}
}
\description{
functions to make manual changes to a cleaned class list
}
\details{
The functions do as their names suggests:
\itemize{
\item add_student_to_school_class(): Adds a student to a class within the class list, where all class/school information remains identical (only student name, DOB changes).
\item update_student_class(): Updates class and class teacher of a student already in the class list.
\item update_class_name(): Updates the class name for all students in a class.
\item update_school_name(): Updates the school name for all students in a school.
\item update_class_teacher(): Updates the teacher of a class for all students. If the class name is NA then the teacher is updated to all classes within a school.
\item remove_class(): Removes all students from a given class in the class list. Note that you can pass multiple classes from within a school at one go by passing a vector of class names.
\item remove_student_from_class(): Removes student/s from a given class in the class list.

}

Note that these manual edits should be performed prior to adding OME ids, withdrawing students or adding blanks (with the exception of remove_student_from_class() which requires some level of student ID to remove students).
}
\examples{
\dontshow{if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Get fake data (note the column names are such that we can use default values)
data = WondePull::class_list_example

# Add student to a class within a school.
df_new = data |> add_student_to_school_class(first_name = 'Jimmy',
                                             last_name = 'Powell',
                                             DoB = '1910-05-07',
                                             URN = '123456',
                                             class_name = 'French')

# update the class of a particular student
df_new |> update_student_class(URN = '123456',
                               first_name = 'Jimmy',
                               last_name = 'Powell',
                               class_name = 'French',
                               new_class_name = 'Fernleaf')

# update the class of a particular student
df_new |> update_student_class(URN = '123456',
                               first_name = 'Jimmy',
                               last_name = 'Powell',
                               class_name = 'French',
                               new_class_name = 'Fernleaf')

# Change the class name 'French' in school, URN = 123456, to 'English'.
df_new |> update_class_name(URN = '123456',
                            class_name = 'French',
                            new_name = 'English')

# Change the school name 'Lavandula Primary School', URN = 123456, to
#  'Lamiaceae Lavandula Primary School'.
df_new |> update_school_name(URN = '123456',
                             new_name = 'Lamiaceae Lavandula Primary School')

# Change the teacher in 'French' class to 'Little Lottie'.
df_new |> update_class_teacher(URN = '123456',
                               class_name = 'French',
                               first_name = 'Little',
                               last_name = 'Lottie')

# Remove 'French' class from class list.
df_new |> remove_class(URN = '123456',
                       class_name = 'French')

# Remove Jimmy Powell from 'French' class, for this to word each student requires a unique id.
df_new$StudentId = 1:nrow(df_new)
student_rm = df_new$StudentId[df_new$`Pupil Last Name` == 'Powell']
df_new |> remove_student_from_class(URN = '123456',
                                    class_name = 'French',
                                    student_id = student_rm)


\dontshow{\}) # examplesIf}
}
