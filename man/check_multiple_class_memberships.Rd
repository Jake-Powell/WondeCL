% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/checks.R
\name{check_multiple_class_memberships}
\alias{check_multiple_class_memberships}
\title{Check and summarize multiple class memberships}
\usage{
check_multiple_class_memberships(
  class_list_df,
  schools,
  WondeData,
  year_codes_target = c("Year 7", "7", "Y7"),
  subject_keywords = c("Maths", "Mathematics", "Ma", "Mathematic"),
  output_prefix = "Checking_subject_classes_overlap"
)
}
\arguments{
\item{class_list_df}{A data frame containing the combined class list across
all schools. Must include at least the columns `"Class Name"` and `"URN"`.}

\item{schools}{A data frame containing school metadata, with at least the
columns `id`, `URN`, and `name`.}

\item{WondeData}{A named list of Wonde school extracts, such as those returned
by `get_secondary_school_student_data()`. Each list element should include
at least the components `student`, `students_classes`, and `subjects`.}

\item{year_codes_target}{Character vector of year codes used to identify
target students (for example, `c("Year 7", "7", "Y7")`).}

\item{subject_keywords}{Character vector of subject name keywords
(case-insensitive) used to select relevant subject classes, typically for
a specific subject such as mathematics.}

\item{output_prefix}{Character string giving the file name prefix for the
generated Excel report. Default is `"Checking_subject_classes_overlap"`.}
}
\value{
A named list in which each element corresponds to a school and contains:
\describe{
  \item{`class_stud`}{A data frame summarizing each class's description,
        student count, and overlap information.}
}
}
\description{
Identifies and summarizes cases where students are assigned to multiple
classes for the same subject within schools. This is commonly used to detect
overlapping or duplicated class memberships (for example, students appearing
in multiple mathematics classes). The function creates per-school summaries
and writes them to an Excel workbook for manual review.
}
\details{
The function performs the following steps:
\enumerate{
  \item Cleans and restructures the input `class_list_df` using helper
        functions: `clean_class_names()`, `reduce_to_best_teacher()`, and
        `produce_class_lists()`.
  \item Identifies schools with students listed in multiple classes (based on
        comma-separated `"Class Name"` entries).
  \item For each school, filters students to those with year codes in
        `year_codes_target` and subjects matching `subject_keywords`.
  \item Summarizes each class's description, size, and student overlap counts.
  \item Exports the results to an Excel workbook (`*_before_fix.xlsx`), with
        one sheet per school showing class size and overlap information.
}
}
\section{Excel output structure}{

The exported workbook (named using `output_prefix`) contains one worksheet per
school. Each worksheet includes a summary table with the following columns:
\describe{
  \item{`classes.data__name`}{The name of the class.}
  \item{`classes_desc`}{The class description field from Wonde data, if available.}
  \item{`size`}{The number of unique students assigned to the class.}
  \item{`classes_overlap`}{A newline-separated list showing which other classes
        share students with the given class, in the format
        `"OtherClassName -> N"`, where `N` is the number of overlapping students.
        If no overlaps are found, the value is `"No other"`.}
}

The workbook file is saved as:
\preformatted{
  <output_prefix>_before_fix.xlsx
}

and can be used to manually inspect or validate data cleaning results.
}

\examples{
\dontrun{
overlaps <- check_multiple_class_memberships(
  class_list_df = class_list_df,
  schools = schools,
  WondeData = WondeData,
  year_codes_target = c("Year 7", "7", "Y7"),
  subject_keywords = c("Maths", "Mathematics"),
  output_prefix = "maths_class_overlap"
)

# View the first school's summary
overlaps[[1]]$class_stud
}

}
\seealso{
[openxlsx::createWorkbook()], [openxlsx::writeDataTable()],
[clean_class_names()], [reduce_to_best_teacher()], [produce_class_lists()]
}
