[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jake Powell. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Powell J (2025). WondeCL: Create class lists Wonde API. R package version 0.1.0, https://github.com/Jake-Powell/WondeCL.","code":"@Manual{,   title = {WondeCL: Create class lists from Wonde API},   author = {Jake Powell},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/Jake-Powell/WondeCL}, }"},{"path":"/index.html","id":"wondecl-","dir":"","previous_headings":"","what":"Create class lists from Wonde API","title":"Create class lists from Wonde API","text":"goal WondeCL make easy use Wonde API create class lists used sending surveys schools cohort studies. package also includes functionality including: manually editing class lists Manually adding schools class list created using Wonde data methods withdrawn students withdrawn study.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create class lists from Wonde API","text":"can install development version WondeCL like :","code":"install.packages('devtools') devtools::install_github('Jake-Powell/WondeCL')"},{"path":"/reference/WondeData_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Wonde-formatted raw data extract — WondeData_template","title":"Example Wonde-formatted raw data extract — WondeData_template","text":"simulated example Wonde API data extract containing multiple schools, structured match output typically returned get_primary_school_student_data() get_secondary_school_student_data(). dataset designed testing, demonstrations, development functions within package operate Wonde-formatted data. mirrors typical nested structure returned Wonde API, including school-, student-, class-, group-level elements.","code":""},{"path":"/reference/WondeData_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Wonde-formatted raw data extract — WondeData_template","text":"","code":"WondeData_template"},{"path":"/reference/WondeData_template.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Wonde-formatted raw data extract — WondeData_template","text":"named list two school datasets: S123456 Simulated data *Lavandula Primary School*. S654321 Simulated data *Digitalis Purpurea Primary School*. school entry list containing: student data frame pupil-level information including   id, forename, surname, date_of_birth.date,   year group fields. education_details data frame linking pupil IDs   unique pupil numbers (UPN). students_classes data frame describing relationship   pupils, classes, class-level metadata (e.g. subject,   teacher, year group). students_group data frame group assignments   registration tutor groups, including assigned teachers. subjects data frame listing available subjects   school, identified subject ID. staff data frame staff members (teachers) associated   classes groups. classes include main   assistant teacher.","code":""},{"path":"/reference/WondeData_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Wonde-formatted raw data extract — WondeData_template","text":"dataset suitable testing package functions : extract_class_list() summarise_school_data() extract_field_across_schools() extract_group_names_across_schools() IDs (e.g. school, student, staff, subject, class, group) generated format \"#########\" (one letter followed 7–10 digits), values simulated demonstration .","code":""},{"path":"/reference/WondeData_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Wonde-formatted raw data extract — WondeData_template","text":"","code":"if (FALSE) { # \\dontrun{ # Load the example data data(\"WondeData_template\")  # Inspect structure str(WondeData_template, max.level = 2)  # Extract a class list from the first school extract_class_list(WondeData_template, schools, maths_names, maths_desc_names, year_pattern) } # }"},{"path":"/reference/add_hex_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Hexadecimal Representation of Numeric IDs — add_hex_id","title":"Add Hexadecimal Representation of Numeric IDs — add_hex_id","text":"Adds hexadecimal representation existing numeric numeric-like identifier column data frame. can useful anonymization, compact storage, cross-system encoding, debugging.","code":""},{"path":"/reference/add_hex_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Hexadecimal Representation of Numeric IDs — add_hex_id","text":"","code":"add_hex_id(data, ID_column = \"ID\", hex_column = \"HexId\")"},{"path":"/reference/add_hex_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Hexadecimal Representation of Numeric IDs — add_hex_id","text":"data data frame containing column numeric numeric-like IDs. ID_column Character string; name column containing IDs convert (default: `\"ID\"`). hex_column Character string; name new column store hexadecimal values (default: `\"HexId\"`).","code":""},{"path":"/reference/add_hex_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Hexadecimal Representation of Numeric IDs — add_hex_id","text":"input data frame additional column containing hexadecimal string representations IDs.","code":""},{"path":"/reference/add_hex_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Hexadecimal Representation of Numeric IDs — add_hex_id","text":"function converts specified ID column numeric, applies `.hexmode()`, coerces result back character. ensures compatibility external file formats tidy workflows. Non-numeric missing values converted `NA` hexadecimal column.","code":""},{"path":"/reference/add_hex_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Hexadecimal Representation of Numeric IDs — add_hex_id","text":"","code":"df <- data.frame(   ID = c(101, 255, 4096, 123456),   Name = c(\"Alice\", \"Bob\", \"Carol\", \"Dave\"),   stringsAsFactors = FALSE )  # Add a hexadecimal column add_hex_id(df) #>       ID  Name HexId #> 1    101 Alice    65 #> 2    255   Bob    ff #> 3   4096 Carol  1000 #> 4 123456  Dave 1e240  # Custom column names add_hex_id(df, ID_column = \"ID\", hex_column = \"HexadecimalCode\") #>       ID  Name HexadecimalCode #> 1    101 Alice              65 #> 2    255   Bob              ff #> 3   4096 Carol            1000 #> 4 123456  Dave           1e240"},{"path":"/reference/add_spares.html","id":null,"dir":"Reference","previous_headings":"","what":"Add spare rows to each class list — add_spares","title":"Add spare rows to each class list — add_spares","text":"Appends specified number **spare (blank)** rows unique class class list. spare rows inherit key identifying fields (school name, URN, class name, teacher information) allow manual data entry, printing, later updates. Optionally, `\"Spare?\"` column can added flag spare entries.","code":""},{"path":"/reference/add_spares.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add spare rows to each class list — add_spares","text":"","code":"add_spares(class_list, no_spares = 3, include_spare_column = FALSE)"},{"path":"/reference/add_spares.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add spare rows to each class list — add_spares","text":"class_list data frame containing class list, typically produced produce_class_lists() create_school_blanks(). Must include following columns: `School name` `URN` `Class Name` `Main Teacher Name` `Main Teacher First Name` `Main Teacher Last Name` `Pupil Last Name` `Pupil First Name` no_spares Integer. number spare (blank) rows add unique class. Defaults `3`. include_spare_column Logical. `TRUE`, column named `\"Spare?\"` added output, `\"Y\"` marking spare rows. Defaults `FALSE`.","code":""},{"path":"/reference/add_spares.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add spare rows to each class list — add_spares","text":"modified version input data frame spare rows appended unique class. `include_spare_column = TRUE`, includes additional `\"Spare?\"` column.","code":""},{"path":"/reference/add_spares.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add spare rows to each class list — add_spares","text":"function typically used prepare finalized printable class lists placeholder rows late student additions. spare entries visually grouped end class sorted.","code":""},{"path":"/reference/add_spares.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add spare rows to each class list — add_spares","text":"","code":"if (FALSE) { # \\dontrun{ # Add three spare entries per class  class_list = WondeCL::class_list_example } # }"},{"path":"/reference/add_student_ids_from_previous.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Student_IDs (and original data) from a previous class list — add_student_ids_from_previous","title":"Add Student_IDs (and original data) from a previous class list — add_student_ids_from_previous","text":"Reuses existing Student_ID values previous class list matching students new class list. Matching first attempted UPN (rows valid UPN), name (first last name) restricted school (URN). datasets date birth information, mismatches flagged appending \"DoB matched\" match method description.","code":""},{"path":"/reference/add_student_ids_from_previous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Student_IDs (and original data) from a previous class list — add_student_ids_from_previous","text":"","code":"add_student_ids_from_previous(   new_class_list,   old_class_list,   FN_column = \"Pupil First Name\",   LN_column = \"Pupil Last Name\",   DoB_column = \"DoB\",   UPN_column = \"UPN\",   URN_column = \"URN\",   Student_ID_column = \"Student_ID\",   verbose = FALSE,   fuzzy_match = TRUE,   max_dist = 2,   method = \"osa\" )"},{"path":"/reference/add_student_ids_from_previous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Student_IDs (and original data) from a previous class list — add_student_ids_from_previous","text":"new_class_list Data frame current class list. old_class_list Data frame previous class list (must contain Student_ID). FN_column Column name pupil first names (default: \"Pupil First Name\"). LN_column Column name pupil last names (default: \"Pupil Last Name\"). DoB_column Column name pupil date birth (default: \"DoB\"). UPN_column Column name pupil UPNs (default: \"UPN\"). URN_column Column name school URNs (default: \"URN\"). Student_ID_column Column name student IDs (default: \"Student_ID\"). verbose Logical; TRUE, prints progress information. fuzzy_match Logical; TRUE, performs fuzzy name matching using OMEManage::match_person_to_data() remaining unmatched students. max_dist Maximum allowed edit distance fuzzy name matching (default: 2). method Method passed stringdist::stringdist() (default: \"osa\").","code":""},{"path":"/reference/add_student_ids_from_previous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Student_IDs (and original data) from a previous class list — add_student_ids_from_previous","text":"updated new_class_list data frame : Student_ID filled possible previous dataset Match Method column (\"UPN\", \"EXACT\", \"FUZZY MATCH\", etc.) Old data columns: Old Pupil First Name, Old Pupil Last Name, Old DoB (available)","code":""},{"path":"/reference/add_student_to_school_class.html","id":null,"dir":"Reference","previous_headings":"","what":"functions to make manual changes to a cleaned class list — add_student_to_school_class","title":"functions to make manual changes to a cleaned class list — add_student_to_school_class","text":"Marks specific student withdrawn setting value 'Withdrawn?' column 'Y' matching record. function checks exactly one student matches given URN, first name, last name.","code":""},{"path":"/reference/add_student_to_school_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"functions to make manual changes to a cleaned class list — add_student_to_school_class","text":"","code":"add_student_to_school_class(   data,   first_name,   last_name,   URN,   class_name,   DoB = NA,   UPN = NA,   URNColumn = \"URN\",   FirstNameColumn = \"Pupil First Name\",   LastNameColumn = \"Pupil Last Name\",   ClassNameColumn = \"Class Name\",   DoBColumn = \"DoB\",   UPNColumn = \"UPN\",   verbose = TRUE )  update_student_class(   data,   URN,   first_name,   last_name,   class_name = NA,   new_class_name,   SchoolNameColumn = \"School name\",   URNColumn = \"URN\",   ClassNameColumn = \"Class Name\",   FirstNameColumn = \"Pupil First Name\",   LastNameColumn = \"Pupil Last Name\",   TeacherColumn = \"Main Teacher Name\",   TeacherFNColumn = \"Main Teacher First Name\",   TeacherLNColumn = \"Main Teacher Last Name\",   verbose = F )  update_class_name(   data,   URN,   class_name,   new_name,   SchoolNameColumn = \"School name\",   URNColumn = \"URN\",   ClassNameColumn = \"Class Name\",   verbose = F )  update_school_name(   data,   URN,   new_name,   SchoolNameColumn = \"School name\",   URNColumn = \"URN\" )  update_class_teacher(   data,   URN,   class_name,   first_name,   last_name,   new_name = paste0(first_name, \" \", last_name),   SchoolNameColumn = \"School name\",   URNColumn = \"URN\",   ClassNameColumn = \"Class Name\",   TeacherColumn = \"Main Teacher Name\",   TeacherFNColumn = \"Main Teacher First Name\",   TeacherLNColumn = \"Main Teacher Last Name\",   verbose = F )  remove_class(   data,   URN,   class_name,   URNColumn = \"URN\",   ClassNameColumn = \"Class Name\",   verbose = F )  remove_student_from_class(   data,   URN,   student_id,   class_name,   URNColumn = \"URN\",   ClassNameColumn = \"Class Name\",   StudentIDColumn = \"StudentId\",   verbose = F )  withdraw_student_from_school_class(   data,   URN,   first_name,   last_name,   URNColumn = \"URN\",   FirstNameColumn = \"Pupil First Name\",   LastNameColumn = \"Pupil Last Name\",   WithdrawColumn = \"Withdrawn?\",   verbose = FALSE )"},{"path":"/reference/add_student_to_school_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"functions to make manual changes to a cleaned class list — add_student_to_school_class","text":"data data frame containing class list. first_name student's first name (exact match, case-sensitive). last_name student's last name (exact match, case-sensitive). URN URN (school ID) school. class_name class added/updated/removed class list. DoB student added/updated/removed class list. UPN Unique person number DfE extracted Wonde education details endpoint. URNColumn name column containing URN (default 'URN'). FirstNameColumn name column containing first name (default 'Pupil First Name'). LastNameColumn name column containing last name (default 'Pupil Last Name'). ClassNameColumn class name column `data`. Default 'Class Name'. DoBColumn student DoB column `data`. Default 'DoB'. UPNColumn UPN column `data`. Default 'UPN'. verbose Logical; TRUE, prints short message change. new_class_name used `update_student_class()` denote class student moving (also used obtain teacher's name new class). SchoolNameColumn school name column `data`. Default 'School Name'. TeacherColumn teacher name (first last name combined) column `data`. Default 'Main Teacher Name'. TeacherFNColumn teacher first name column `data`. Default \"Main Teacher First Name\". TeacherLNColumn teacher last name column `data`. Default \"Main Teacher Last Name\". new_name new school/class/teacher (first + last) name added class list. student_id student id/s students removed class list. StudentIDColumn first name column `data`. Default \"StudentId\". WithdrawColumn name column mark withdrawn (default 'Withdrawn?').","code":""},{"path":"/reference/add_student_to_school_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"functions to make manual changes to a cleaned class list — add_student_to_school_class","text":"updated data frame student marked withdrawn. student multiple students match, warning issued changes made.","code":""},{"path":"/reference/add_student_to_school_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"functions to make manual changes to a cleaned class list — add_student_to_school_class","text":"functions names suggests: add_student_to_school_class(): Adds student class within class list, class/school information remains identical (student name, DOB changes). update_student_class(): Updates class class teacher student already class list. update_class_name(): Updates class name students class. update_school_name(): Updates school name students school. update_class_teacher(): Updates teacher class students. class name NA teacher updated classes within school. remove_class(): Removes students given class class list. Note can pass multiple classes within school one go passing vector class names. remove_student_from_class(): Removes student/s given class class list. Note manual edits performed prior adding student ids, withdrawing students adding blanks (exception remove_student_from_class() requires level student ID remove students).","code":""},{"path":"/reference/add_student_to_school_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"functions to make manual changes to a cleaned class list — add_student_to_school_class","text":"","code":"if (FALSE) { # Get fake data (note the column names are such that we can use default values) data = WondeCL::class_list_example  # Add student to a class within a school. df_new = data |> add_student_to_school_class(first_name = 'Jimmy',                                              last_name = 'Powell',                                              DoB = '1910-05-07',                                              URN = '123456',                                              class_name = 'French')  # update the class of a particular student df_new |> update_student_class(URN = '123456',                                first_name = 'Jimmy',                                last_name = 'Powell',                                class_name = 'French',                                new_class_name = 'Fernleaf')  # update the class of a particular student df_new |> update_student_class(URN = '123456',                                first_name = 'Jimmy',                                last_name = 'Powell',                                class_name = 'French',                                new_class_name = 'Fernleaf')  # Change the class name 'French' in school, URN = 123456, to 'English'. df_new |> update_class_name(URN = '123456',                             class_name = 'French',                             new_name = 'English')  # Change the school name 'Lavandula Primary School', URN = 123456, to #  'Lamiaceae Lavandula Primary School'. df_new |> update_school_name(URN = '123456',                              new_name = 'Lamiaceae Lavandula Primary School')  # Change the teacher in 'French' class to 'Little Lottie'. df_new |> update_class_teacher(URN = '123456',                                class_name = 'French',                                first_name = 'Little',                                last_name = 'Lottie')  # Remove 'French' class from class list. df_new |> remove_class(URN = '123456',                        class_name = 'French')  # Remove Jimmy Powell from 'French' class, for this to word each student requires a unique id. df_new$StudentId = 1:nrow(df_new) student_rm = df_new$StudentId[df_new$`Pupil Last Name` == 'Powell'] df_new |> remove_student_from_class(URN = '123456',                                     class_name = 'French',                                     student_id = student_rm) }"},{"path":"/reference/apply_withdrawn.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply withdrawn status to class list — apply_withdrawn","title":"Apply withdrawn status to class list — apply_withdrawn","text":"Matches withdrawn students (parent guardian withdrawal spreadsheet) corresponding students class list marks withdrawn.","code":""},{"path":"/reference/apply_withdrawn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply withdrawn status to class list — apply_withdrawn","text":"","code":"apply_withdrawn(   class_list,   withdrawn_students,   school_link = \"~/Wonde/Establishment_List_ID.xlsx\",   links_category = \"Primary\",   expected_years = c(2019, 2020),   do_log = FALSE )"},{"path":"/reference/apply_withdrawn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply withdrawn status to class list — apply_withdrawn","text":"class_list Data frame class membership data. withdrawn_students Data frame withdrawal form responses, path Excel file containing . school_link Path school reference list Excel file. links_category Character vector categories (example \"Primary\") filter reference school list. expected_years Numeric vector expected birth years validate DoBs. do_log Logical; TRUE, log file (\"Withdrawn_students.log\") written.","code":""},{"path":"/reference/apply_withdrawn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply withdrawn status to class list — apply_withdrawn","text":"list two elements: * class_list: Updated version input class list Withdrawn? column. * withdraw: Data frame withdrawal records, including match details indices.","code":""},{"path":"/reference/apply_withdrawn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply withdrawn status to class list — apply_withdrawn","text":"function attempts find withdrawn student within provided class_list matching school name, first name, last name, available, date birth. handles various date formats normalizes name casing punctuation ensure robust matching. Matching performed priority order: 1. Exact first last name match 2. Partial first last name match 3. Partial match names 4. First name DoB match 5. Exact surname match school name matching handled internal function `.match_school_name()`.","code":""},{"path":[]},{"path":"/reference/check_multiple_class_memberships.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and summarize multiple class memberships — check_multiple_class_memberships","title":"Check and summarize multiple class memberships — check_multiple_class_memberships","text":"Identifies summarizes cases students assigned multiple classes subject within schools. commonly used detect overlapping duplicated class memberships (example, students appearing multiple mathematics classes). function creates per-school summaries writes Excel workbook manual review.","code":""},{"path":"/reference/check_multiple_class_memberships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and summarize multiple class memberships — check_multiple_class_memberships","text":"","code":"check_multiple_class_memberships(   class_list_df,   schools,   WondeData,   year_codes_target = c(\"Year 7\", \"7\", \"Y7\"),   subject_keywords = c(\"Maths\", \"Mathematics\", \"Ma\", \"Mathematic\"),   output_prefix = \"Checking_subject_classes_overlap\" )"},{"path":"/reference/check_multiple_class_memberships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and summarize multiple class memberships — check_multiple_class_memberships","text":"class_list_df data frame containing combined class list across schools. Must include least columns `\"Class Name\"` `\"URN\"`. schools data frame containing school metadata, least columns `id`, `URN`, `name`. WondeData named list Wonde school extracts, returned `get_secondary_school_student_data()`. list element include least components `student`, `students_classes`, `subjects`. year_codes_target Character vector year codes used identify target students (example, `c(\"Year 7\", \"7\", \"Y7\")`). subject_keywords Character vector subject name keywords (case-insensitive) used select relevant subject classes, typically specific subject mathematics. output_prefix Character string giving file name prefix generated Excel report. Default `\"Checking_subject_classes_overlap\"`.","code":""},{"path":"/reference/check_multiple_class_memberships.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and summarize multiple class memberships — check_multiple_class_memberships","text":"named list element corresponds school contains: `class_stud` data frame summarizing class's description,         student count, overlap information.","code":""},{"path":"/reference/check_multiple_class_memberships.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and summarize multiple class memberships — check_multiple_class_memberships","text":"function performs following steps: Cleans restructures input `class_list_df` using helper         functions: `clean_class_names()`, `reduce_to_best_teacher()`,         `produce_class_lists()`. Identifies schools students listed multiple classes (based         comma-separated `\"Class Name\"` entries). school, filters students year codes         `year_codes_target` subjects matching `subject_keywords`. Summarizes class's description, size, student overlap counts. Exports results Excel workbook (`*_before_fix.xlsx`),         one sheet per school showing class size overlap information.","code":""},{"path":"/reference/check_multiple_class_memberships.html","id":"excel-output-structure","dir":"Reference","previous_headings":"","what":"Excel output structure","title":"Check and summarize multiple class memberships — check_multiple_class_memberships","text":"exported workbook (named using `output_prefix`) contains one worksheet per school. worksheet includes summary table following columns: `classes.data__name` name class. `classes_desc` class description field Wonde data, available. `size` number unique students assigned class. `classes_overlap` newline-separated list showing classes         share students given class, format         `\"OtherClassName -> N\"`, `N` number overlapping students.         overlaps found, value `\"\"`. workbook file saved : can used manually inspect validate data cleaning results.","code":"<output_prefix>_before_fix.xlsx"},{"path":[]},{"path":"/reference/check_multiple_class_memberships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and summarize multiple class memberships — check_multiple_class_memberships","text":"","code":"if (FALSE) { # \\dontrun{ overlaps <- check_multiple_class_memberships(   class_list_df = class_list_df,   schools = schools,   WondeData = WondeData,   year_codes_target = c(\"Year 7\", \"7\", \"Y7\"),   subject_keywords = c(\"Maths\", \"Mathematics\"),   output_prefix = \"maths_class_overlap\" )  # View the first school's summary overlaps[[1]]$class_stud } # }"},{"path":"/reference/check_students_missing_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for students missing subject class assignments — check_students_missing_class","title":"Check for students missing subject class assignments — check_students_missing_class","text":"Identifies students provided class list recorded class assignment (.e., missing `ClassId`), retrieves related subject class data Wonde exports, summarises issue per school. function provides clear overview students currently enrolled subject class, Maths.","code":""},{"path":"/reference/check_students_missing_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for students missing subject class assignments — check_students_missing_class","text":"","code":"check_students_missing_class(   class_list_df,   WondeData,   subject_name = \"Maths\",   output_prefix = \"Students_without_subject_class\" )"},{"path":"/reference/check_students_missing_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for students missing subject class assignments — check_students_missing_class","text":"class_list_df data frame containing class list information, typically output extract_class_list(). Must include least columns `SchoolId`, `SchoolName`, `StudentId`, `ClassId`, `StudentFirstName`, `StudentLastName`. WondeData named list Wonde data frames, usually returned get_secondary_school_student_data(), element corresponds school includes components `students_classes` `subjects`. subject_name Character string specifying subject interest (e.g., `\"Maths\"`). value used output labeling. Default `\"Maths\"`. output_prefix Character string specifying prefix output filenames logs. Default `\"Students_without_subject_class\"`.","code":""},{"path":"/reference/check_students_missing_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for students missing subject class assignments — check_students_missing_class","text":"list containing three data frames: `missing_students` Data frame students missing class IDs. `class_subject_of_missing` Data frame showing available class   subject details missing student, derived `WondeData`. `missing_per_school` Summary data frame showing total number   percentage affected students per school.","code":""},{"path":"/reference/check_students_missing_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for students missing subject class assignments — check_students_missing_class","text":"function performs following steps: Uses detect_students_missing_class() identify         students without class assignment. missing student, extracts available class subject         information corresponding school's `WondeData` entry. Aggregates school-level summary reporting total number         percentage affected students. typically used diagnostic quality-control step data extraction, final analysis export.","code":""},{"path":"/reference/check_students_missing_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for students missing subject class assignments — check_students_missing_class","text":"","code":"if (FALSE) { # \\dontrun{ missing_summary <- check_students_missing_class(   class_list_df = class_list_df,   WondeData = WondeData,   subject_name = \"Maths\" )  head(missing_summary$missing_per_school) } # }"},{"path":"/reference/class_list_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example class list dataset — class_list_example","title":"Example class list dataset — class_list_example","text":"example cleaned class list containing two schools three classes. variables follows: School name. URN. Class Name. Main Teacher First Name. Main Teacher Last Name. Pupil First Name. Pupil Last Name. DoB. Formatted YYYY-MM-DD. UPN.","code":""},{"path":"/reference/class_list_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example class list dataset — class_list_example","text":"","code":"class_list_example"},{"path":"/reference/class_list_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example class list dataset — class_list_example","text":"data frame 60 rows 9 variables","code":""},{"path":"/reference/clean_class_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and standardize class names in school data — clean_class_names","title":"Clean and standardize class names in school data — clean_class_names","text":"Attempts clean, fill, standardize class identifiers names within school dataset. Missing inconsistent class names replaced default name (e.g. `\"Reception\"`). Classes contain exactly group students merged single logical class.","code":""},{"path":"/reference/clean_class_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and standardize class names in school data — clean_class_names","text":"","code":"clean_class_names(data, default_class_name = \"Reception\")"},{"path":"/reference/clean_class_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and standardize class names in school data — clean_class_names","text":"data data frame containing least columns `SchoolId`, `StudentId`, `ClassId`, `ClassName`. default_class_name Character string specifying class name use class name ID available. Default `\"Reception\"`.","code":""},{"path":"/reference/clean_class_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and standardize class names in school data — clean_class_names","text":"data frame identical input `data` two new columns added: `ClassId_use` cleaned class identifier, missing values   replaced `<SchoolId>CLASS`. `class_name_use` standardized, title-cased class name suitable   downstream processing.","code":""},{"path":"/reference/clean_class_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and standardize class names in school data — clean_class_names","text":"function performs following operations: Extracts class-related fields (`SchoolId`, `StudentId`, `ClassId`,         `ClassName`) input data. Replaces missing `ClassId` `ClassName` values         `default_class_name` synthetic class ID. Checks whether students belong multiple classes identifies         sets classes share exactly student membership. set identical classes belongs entirely one school         school classes, merges single class named         `default_class_name`. Produces two new cleaned columns, `ClassId_use`         `class_name_use`, leaving original data unchanged. function designed used early class list cleaning workflow, typically followed `reduce_to_best_teacher()` `produce_class_lists()`.","code":""},{"path":"/reference/clean_class_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and standardize class names in school data — clean_class_names","text":"","code":"if (FALSE) { # \\dontrun{ cleaned <- clean_class_names(class_list_df, default_class_name = \"Year 7\") head(cleaned$class_name_use) } # }"},{"path":"/reference/clean_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean names — clean_name","title":"Clean names — clean_name","text":"Clean names","code":""},{"path":"/reference/clean_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean names — clean_name","text":"","code":"clean_name(x, rm_whit = F)"},{"path":"/reference/clean_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean names — clean_name","text":"x name clean rm_whit Flag (TRUE/FALSE) whether whitespace wants removed names","code":""},{"path":"/reference/clean_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean names — clean_name","text":"cleaned name","code":""},{"path":"/reference/clean_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean names — clean_name","text":"\"Cleans\" name changing lower case translating Latin-ASCII (.e removing accents, etc). Can also remove whitespace setting rm_whit = T.","code":""},{"path":"/reference/clean_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean names — clean_name","text":"","code":"clean_name('John Leonard Knapp') #> [1] \"john leonard knapp\"  clean_name('Pierre-Joseph Redouté') #> [1] \"pierre-joseph redoute\""},{"path":"/reference/clean_teacher_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and standardize teacher name formatting — clean_teacher_names","title":"Clean and standardize teacher name formatting — clean_teacher_names","text":"Converts teacher name fields class list title case (e.g., \"john SMITH\" becomes \"John Smith\"). ensures consistent formatting across teacher names display, reporting, downstream processing.","code":""},{"path":"/reference/clean_teacher_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and standardize teacher name formatting — clean_teacher_names","text":"","code":"clean_teacher_names(   data,   teacher_name_col = \"Main Teacher Name\",   TeacherFNColumn = \"Main Teacher First Name\",   TeacherLNColumn = \"Main Teacher Last Name\" )"},{"path":"/reference/clean_teacher_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and standardize teacher name formatting — clean_teacher_names","text":"data data frame containing class list information. Must include teacher name columns `\"Main Teacher Name\"`, `\"Main Teacher First Name\"`, `\"Main Teacher Last Name\"`. teacher_name_col Character string giving name column containing teacher's full name. Defaults `\"Main Teacher Name\"`. TeacherFNColumn Character string giving name column containing teacher's first name. Defaults `\"Main Teacher First Name\"`. TeacherLNColumn Character string giving name column containing teacher's last name. Defaults `\"Main Teacher Last Name\"`.","code":""},{"path":"/reference/clean_teacher_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and standardize teacher name formatting — clean_teacher_names","text":"data frame identical input `data`, teacher name columns converted title case.","code":""},{"path":"/reference/clean_teacher_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean and standardize teacher name formatting — clean_teacher_names","text":"function typically used data extraction merging steps clean inconsistent capitalization teacher names. complementary clean_class_names() reduce_to_best_teacher(), providing final formatting pass export. specified teacher name columns missing input data, function stop informative error message.","code":""},{"path":"/reference/clean_teacher_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean and standardize teacher name formatting — clean_teacher_names","text":"","code":"if (FALSE) { # \\dontrun{ cleaned_df <- clean_teacher_names(class_list_df) head(cleaned_df[, c(\"Main Teacher Name\", \"Main Teacher First Name\", \"Main Teacher Last Name\")]) } # }"},{"path":"/reference/clear_withdrawn_student_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear identifying data for withdrawn students — clear_withdrawn_student_data","title":"Clear identifying data for withdrawn students — clear_withdrawn_student_data","text":"students marked withdrawn (.e., rows 'Withdrawn?' column equals 'Y'), function removes identifying information setting selected columns NA. Specifically, function sets values 'UPN', 'DoB', 'Print ID', 'OME_ID' NA, columns already exist data frame. Missing columns ignored.","code":""},{"path":"/reference/clear_withdrawn_student_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear identifying data for withdrawn students — clear_withdrawn_student_data","text":"","code":"clear_withdrawn_student_data(   data,   WithdrawColumn = \"Withdrawn?\",   columns_to_clear = c(\"UPN\", \"DoB\", \"Print ID\", \"OME_ID\"),   verbose = FALSE )"},{"path":"/reference/clear_withdrawn_student_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear identifying data for withdrawn students — clear_withdrawn_student_data","text":"data data frame representing class list. WithdrawColumn name column used indicate withdrawn students (default: 'Withdrawn?'). columns_to_clear character vector column names clear withdrawn students. Default: c(\"UPN\", \"DoB\", \"Print ID\", \"OME_ID\"). verbose Logical; TRUE, prints summary message.","code":""},{"path":"/reference/clear_withdrawn_student_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear identifying data for withdrawn students — clear_withdrawn_student_data","text":"updated data frame specified fields cleared withdrawn students.","code":""},{"path":"/reference/clear_withdrawn_student_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear identifying data for withdrawn students — clear_withdrawn_student_data","text":"","code":"if (FALSE) { # \\dontrun{ updated_class_list <- clear_withdrawn_student_data(class_list) } # }"},{"path":"/reference/combine_raw_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine two Wonde raw data lists element-wise — combine_raw_data","title":"Combine two Wonde raw data lists element-wise — combine_raw_data","text":"Merges two lists raw Wonde school datasets (b) single combined list. typically used append newly retrieved school data (e.g., additional Wonde API extracts) existing dataset pulled earlier. element list b added list using name key. name already exists , overwritten corresponding element b.","code":""},{"path":"/reference/combine_raw_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine two Wonde raw data lists element-wise — combine_raw_data","text":"","code":"combine_raw_data(a, b)"},{"path":"/reference/combine_raw_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine two Wonde raw data lists element-wise — combine_raw_data","text":"named list Wonde raw datasets, usually original data pulled via get_primary_school_student_data() get_secondary_school_student_data(). b second named list Wonde raw datasets appended merged .","code":""},{"path":"/reference/combine_raw_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine two Wonde raw data lists element-wise — combine_raw_data","text":"single combined list containing elements b. resulting structure suitable downstream processing functions extract_class_list() summarise_school_data().","code":""},{"path":"/reference/combine_raw_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine two Wonde raw data lists element-wise — combine_raw_data","text":"function commonly used schools pulled Wonde API later time (example, schools missing original retrieval). Instead re-pulling data, can append new raw extracts directly using helper. combination done name: element b added existing name (usually Wonde school ID). duplicate names present, entries b overwrite .","code":""},{"path":"/reference/combine_raw_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine two Wonde raw data lists element-wise — combine_raw_data","text":"","code":"if (FALSE) { # \\dontrun{ # Original Wonde data raw_data_1 <- get_secondary_school_student_data(school_ids = c(\"A100001\", \"A100002\"))  # Later, new schools become available raw_data_2 <- get_secondary_school_student_data(school_ids = c(\"A100003\", \"A100004\"))  # Combine both into one object combined_raw <- combine_raw_data(raw_data_1, raw_data_2)  # The result can then be used in extract_class_list() class_list <- extract_class_list(WondeData = combined_raw, ...) } # }"},{"path":"/reference/convert_list_element_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list-column elements into data frames — convert_list_element_to_df","title":"Convert list-column elements into data frames — convert_list_element_to_df","text":"Ensures elements within specified list-column data frame valid data frames. function particularly useful working nested data structures returned APIs list-based imports (Wonde data), entries may contain empty lists instead empty data frames. element specified column checked; element empty list, replaced empty data frame. helps prevent downstream errors functions expect every list element data frame.","code":""},{"path":"/reference/convert_list_element_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list-column elements into data frames — convert_list_element_to_df","text":"","code":"convert_list_element_to_df(data, column_to_unnest)"},{"path":"/reference/convert_list_element_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list-column elements into data frames — convert_list_element_to_df","text":"data data frame containing least one list-column process. column_to_unnest Character string giving name column whose elements checked converted.","code":""},{"path":"/reference/convert_list_element_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list-column elements into data frames — convert_list_element_to_df","text":"input data specified column modified empty list elements replaced empty data frames.","code":""},{"path":"/reference/convert_list_element_to_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert list-column elements into data frames — convert_list_element_to_df","text":"function typically used preprocessing step standardize nested Wonde API outputs hierarchical data sources prior unnesting, binding, summarising operations.","code":""},{"path":"/reference/convert_list_element_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert list-column elements into data frames — convert_list_element_to_df","text":"","code":"if (FALSE) { # \\dontrun{ # Example with an empty list element df <- data.frame(info = I(list(data.frame(a = 1), list(), data.frame(a = 2)))) cleaned <- convert_list_element_to_df(df, \"info\") str(cleaned$info) } # }"},{"path":"/reference/create_school_blanks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create blank class lists for schools without Wonde data — create_school_blanks","title":"Create blank class lists for schools without Wonde data — create_school_blanks","text":"Generates synthetic \"blank\" class lists schools Wonde data access. function uses provided school information (including estimated student counts optional teacher class information) create mock class lists standardised format downstream processing printing.","code":""},{"path":"/reference/create_school_blanks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create blank class lists for schools without Wonde data — create_school_blanks","text":"","code":"create_school_blanks(   schools_with_size,   numbering_type = \"school\",   teacher_name = c(\"Reception\", \"Teacher\"),   class_name = \"Reception Class\",   type = 30,   class_buffer = 5,   class_size = 30,   class_list_columns = \"master\" )"},{"path":"/reference/create_school_blanks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create blank class lists for schools without Wonde data — create_school_blanks","text":"schools_with_size data frame containing least: `SchoolName` — name school. `URN` — Unique Reference Number school. `NoStudents` — Estimated number students school. Optional: `ClassInfo` (formatted `\"Class1 -> 28, Class2 -> 30\"`)         specify class names sizes. Optional: `TeacherInfo` (formatted `\"First Last, First Last\"`)         specify class teacher names. numbering_type Character, default `\"school\"`. Determines pupils numbered. `\"school\"`, assigns sequential pupil numbers across entire school. teacher_name Character vector length 2 giving default teacher first last name use none provided `schools_with_size`. Defaults `c(\"Reception\", \"Teacher\")`. class_name Character, default `\"Reception Class\"`. base name use automatically generating class names (e.g. `\"Reception Class 1\"`, `\"Reception Class 2\"`). type Numeric character, default `30`. numeric, sets default number students per class. numeric (e.g. `\"auto\"`), class sizes estimated total student counts divided across inferred classes, plus optional buffer (see `class_buffer`). class_buffer Integer, default `5`. class sizes automatically estimated, value added computed class size avoid undercounting. class_size Integer, default `30`. Target class size used determine many classes create per school `ClassInfo` missing. class_list_columns Character vector specifying desired column structure returned data frame. Two shortcuts available: `\"master\"` — returns key fields (school info, teacher, pupil, IDs, withdrawal status). `\"print\"` — returns reduced set fields printing lists.","code":""},{"path":"/reference/create_school_blanks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create blank class lists for schools without Wonde data — create_school_blanks","text":"data frame representing generated class list supplied schools. columns order depend value `class_list_columns`.","code":""},{"path":"/reference/create_school_blanks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create blank class lists for schools without Wonde data — create_school_blanks","text":"school, function: Parses `ClassInfo` `TeacherInfo` columns (present)         determine number names classes, associated teachers. `ClassInfo` missing, automatically estimates number         classes required based total student count `class_size`. Creates one blank class lists school, assigning         placeholder pupil numbers teacher names. Fills missing required columns `NA` reorders columns         according `class_list_columns`. function designed ensure downstream processing scripts (e.g., withdrawal handling, printing, ID assignment) can operate schools even data received Wonde.","code":""},{"path":[]},{"path":"/reference/create_school_blanks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create blank class lists for schools without Wonde data — create_school_blanks","text":"","code":"if (FALSE) { # \\dontrun{ # Example input data schools_df <- data.frame(   SchoolName = c(\"Maple Primary\", \"Oakwood Academy\"),   URN = c(123456, 789012),   NoStudents = c(60, 90) )  # Create blank class lists blanks <- create_school_blanks(   schools_with_size = schools_df,   class_size = 30,   class_list_columns = \"master\" )  head(blanks) } # }"},{"path":"/reference/detect_multiple_class_memberships.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect students with multiple class memberships — detect_multiple_class_memberships","title":"Detect students with multiple class memberships — detect_multiple_class_memberships","text":"Identifies students appear belong one class within provided class list. function runs standard cleaning pipeline ensure class teacher information consistent detection, filters cases `Class Name` field contains multiple class names joined commas.","code":""},{"path":"/reference/detect_multiple_class_memberships.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect students with multiple class memberships — detect_multiple_class_memberships","text":"","code":"detect_multiple_class_memberships(class_list_df)"},{"path":"/reference/detect_multiple_class_memberships.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect students with multiple class memberships — detect_multiple_class_memberships","text":"class_list_df data frame containing class list information, typically output `extract_class_list()`. include minimum `SchoolId`, `StudentId`, `ClassId`, `ClassName`, associated teacher student details.","code":""},{"path":"/reference/detect_multiple_class_memberships.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect students with multiple class memberships — detect_multiple_class_memberships","text":"data frame students listed one class, teacher columns removed clarity.","code":""},{"path":"/reference/detect_multiple_class_memberships.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect students with multiple class memberships — detect_multiple_class_memberships","text":"function performs following steps: Cleans standardizes class names using         clean_class_names(). Reduces duplicate student records main teacher using         reduce_to_best_teacher(). Produces summarized class list via         produce_class_lists(). Filters records Class Name contains comma,         indicating multiple class associations. function typically used part quality-assurance step running overlap membership consistency checks.","code":""},{"path":"/reference/detect_multiple_class_memberships.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect students with multiple class memberships — detect_multiple_class_memberships","text":"","code":"if (FALSE) { # \\dontrun{ multi_members <- detect_multiple_class_memberships(class_list_df) head(multi_members) } # }"},{"path":"/reference/detect_students_missing_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect students missing a class assignment — detect_students_missing_class","title":"Detect students missing a class assignment — detect_students_missing_class","text":"Identifies students provided class list recorded class assignment (.e., missing `ClassId` values). function useful quickly checking data completeness class extraction cleaning.","code":""},{"path":"/reference/detect_students_missing_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect students missing a class assignment — detect_students_missing_class","text":"","code":"detect_students_missing_class(class_list_df)"},{"path":"/reference/detect_students_missing_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect students missing a class assignment — detect_students_missing_class","text":"class_list_df data frame containing least column `ClassId` student-level information. Typically output extract_class_list() subsequent cleaning step.","code":""},{"path":"/reference/detect_students_missing_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect students missing a class assignment — detect_students_missing_class","text":"data frame containing rows `ClassId` field missing (`NA`), representing students assigned class.","code":""},{"path":"/reference/detect_students_missing_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect students missing a class assignment — detect_students_missing_class","text":"function lightweight diagnostic tool used flag students class membership information available. modify input data frame, filters . commonly used prior conjunction check_students_missing_class() validation utilities check subject-specific year-specific class assignments.","code":""},{"path":"/reference/detect_students_missing_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect students missing a class assignment — detect_students_missing_class","text":"","code":"if (FALSE) { # \\dontrun{ missing_class_students <- detect_students_missing_class(class_list_df) head(missing_class_students) } # }"},{"path":"/reference/ensure_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure all specified columns exist in a data frame — ensure_columns","title":"Ensure all specified columns exist in a data frame — ensure_columns","text":"internal helper function checks whether specified column names present data frame. requested columns missing, automatically created filled NA. function returns data frame restricted specified column order.","code":""},{"path":"/reference/ensure_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure all specified columns exist in a data frame — ensure_columns","text":"","code":"ensure_columns(df, cols)"},{"path":"/reference/ensure_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure all specified columns exist in a data frame — ensure_columns","text":"df data frame check modify. cols Character vector expected column names.","code":""},{"path":"/reference/ensure_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure all specified columns exist in a data frame — ensure_columns","text":"data frame containing requested columns (cols), order,   missing columns added filled NA.","code":""},{"path":"/reference/ensure_columns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure all specified columns exist in a data frame — ensure_columns","text":"useful working Wonde datasets API responses field availability can vary schools. ensures consistent column structures across resulting data frames.","code":""},{"path":"/reference/ensure_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure all specified columns exist in a data frame — ensure_columns","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(a = 1:3, b = 4:6) ensure_columns(df, c(\"a\", \"b\", \"c\")) # Returns a data frame with columns a, b, c (column c filled with NA) } # }"},{"path":"/reference/extract_class_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a subject-specific class list from Wonde API data — extract_class_list","title":"Extract a subject-specific class list from Wonde API data — extract_class_list","text":"Extract subject-specific class list Wonde API data","code":""},{"path":"/reference/extract_class_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a subject-specific class list from Wonde API data — extract_class_list","text":"","code":"extract_class_list(   WondeData,   schools,   maths_names,   maths_desc_names,   year_pattern,   verbose = TRUE )"},{"path":"/reference/extract_class_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a subject-specific class list from Wonde API data — extract_class_list","text":"WondeData List school-level data returned get_secondary_school_student_data(). schools Data frame school metadata containing least id, name, urn. maths_names Character vector subject names match (used GetMathBySubject = TRUE). maths_desc_names Character vector text fragments match class descriptions (used GetMathByClassDescription = TRUE). year_pattern Character numeric pattern used match student year codes (e.g., `\"7\"` Year 7 `\"8\"` Year 8). verbose Logical; TRUE, prints progress.","code":""},{"path":"/reference/extract_class_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a subject-specific class list from Wonde API data — extract_class_list","text":"data frame combining matched student, class, teacher information   across schools, NULL valid data found.","code":""},{"path":"/reference/extract_class_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a subject-specific class list from Wonde API data — extract_class_list","text":"","code":"if (FALSE) { class_list_df <- extract_class_list(   WondeData = WondeData,   schools = schools,   secondary = secondary,   maths_names = c(\"Mathematics\", \"Maths\"),   maths_desc_names = c(\"MATH\", \"NUMERACY\"),   year_pattern = \"7\" ) }"},{"path":"/reference/extract_class_list_classes_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract class lists for schools using class or registration group structures — extract_class_list_classes_groups","title":"Extract class lists for schools using class or registration group structures — extract_class_list_classes_groups","text":"function creates detailed class list schools teaching groups organised *classes* *registration groups* rather subjects. compiles student, class, teacher information specified year code(s) across schools included provided Wonde dataset list.","code":""},{"path":"/reference/extract_class_list_classes_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract class lists for schools using class or registration group structures — extract_class_list_classes_groups","text":"","code":"extract_class_list_classes_groups(   WondeData,   schools,   yearCodes,   verbose = TRUE )"},{"path":"/reference/extract_class_list_classes_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract class lists for schools using class or registration group structures — extract_class_list_classes_groups","text":"WondeData named list school datasets, typically generated Wonde data retrieval functions (e.g., get_primary_school_student_data). element represents one school's full dataset. schools data frame containing metadata schools, including least columns: id Wonde school ID (matches names WondeData) urn Unique Reference Number classes Indicator description whether class data available registration_groups Indicator description whether registration group data available yearCodes Character vector year codes identifying students include (e.g. c(\"YR\", \"R\") Reception, \"Y1\" Year 1, etc.). verbose Logical (default = TRUE). Whether print progress messages warnings missing inconsistent data.","code":""},{"path":"/reference/extract_class_list_classes_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract class lists for schools using class or registration group structures — extract_class_list_classes_groups","text":"data frame containing class list information selected year   code(s) across schools, columns: SchoolId Wonde school ID SchoolName School name EstablishmentNumber Establishment number Wonde URN Unique Reference Number UPN Unique pupil number (available) StudentId Wonde student ID StudentFirstName Student forename StudentLastName Student surname DoB Student date birth (YYYY-MM-DD) ClassId Class registration group ID ClassName Class group name/code TeacherId Teacher’s Wonde ID TeacherForeName Teacher’s forename TeacherSurName Teacher’s surname TeacherName Combined teacher name","code":""},{"path":"/reference/extract_class_list_classes_groups.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract class lists for schools using class or registration group structures — extract_class_list_classes_groups","text":"function supports two data structures: Class structure: students linked via students_classes. Registration group structure: students linked via         students_group groups.data__type == \"REGISTRATION\". function first attempts build class list using students_classes dataset. valid class data available school, falls back using registration group data students_group. Warnings issued schools students matched across datasets.","code":""},{"path":[]},{"path":"/reference/extract_class_list_classes_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract class lists for schools using class or registration group structures — extract_class_list_classes_groups","text":"","code":"if (FALSE) { # \\dontrun{ # Extract Reception class lists across all schools using class/group structures reception_classes <- extract_class_list_classes_groups(   WondeData = school_data_raw,   schools = schools_metadata,   yearCodes = c(\"R\", \"YR\") )  # Extract Year 1 class lists y1_classes <- extract_class_list_classes_groups(   WondeData = school_data_raw,   schools = schools_metadata,   yearCodes = \"Y1\" ) } # }"},{"path":"/reference/extract_field_across_schools.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract distinct values across schools for a specified field — extract_field_across_schools","title":"Extract distinct values across schools for a specified field — extract_field_across_schools","text":"general-purpose function scans list Wonde school datasets (`WondeData`) compiles summary distinct values found user-specified field (column) within school's dataset.","code":""},{"path":"/reference/extract_field_across_schools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract distinct values across schools for a specified field — extract_field_across_schools","text":"","code":"extract_field_across_schools(   WondeData,   field_path,   value_name = \"value\",   verbose = TRUE )"},{"path":"/reference/extract_field_across_schools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract distinct values across schools for a specified field — extract_field_across_schools","text":"WondeData named list school datasets, typically created data retrieval functions get_primary_school_student_data get_secondary_school_student_data. field_path Character. path column interest within Wonde dataset, using `$` notation (e.g., \"student$students.data__year.data.code\"). value_name Character. Optional. name give column containing distinct field values output (default = \"value\"). verbose Logical. TRUE (default), prints messages schools skipped due missing data fields.","code":""},{"path":"/reference/extract_field_across_schools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract distinct values across schools for a specified field — extract_field_across_schools","text":"data frame : value_name distinct values extracted across schools. count total number records across schools value. school_ids Comma-separated list school IDs value appears.","code":""},{"path":"/reference/extract_field_across_schools.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract distinct values across schools for a specified field — extract_field_across_schools","text":"example, can used summarise: * Year codes - `student$students.data__year.data.code` * Group names - `students_group$groups.data__name`","code":""},{"path":"/reference/extract_field_across_schools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract distinct values across schools for a specified field — extract_field_across_schools","text":"","code":"if (FALSE) { # \\dontrun{ extract_field_across_schools(WondeData, \"student$students.data__year.data.code\") extract_field_across_schools(WondeData, \"students_group$groups.data__name\", \"group_name\", verbose = FALSE) } # }"},{"path":"/reference/extract_group_names_across_schools.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract unique group names across schools — extract_group_names_across_schools","title":"Extract unique group names across schools — extract_group_names_across_schools","text":"Wrapper extract_field_across_schools summarises group names across schools.","code":""},{"path":"/reference/extract_group_names_across_schools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract unique group names across schools — extract_group_names_across_schools","text":"","code":"extract_group_names_across_schools(WondeData, verbose = TRUE)"},{"path":"/reference/extract_group_names_across_schools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract unique group names across schools — extract_group_names_across_schools","text":"WondeData named list school datasets, typically created data retrieval functions get_primary_school_student_data get_secondary_school_student_data. verbose Logical. TRUE (default), prints messages schools skipped due missing data fields.","code":""},{"path":"/reference/extract_group_types_across_schools.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract unique group types across schools — extract_group_types_across_schools","title":"Extract unique group types across schools — extract_group_types_across_schools","text":"Wrapper extract_field_across_schools summarises group types across schools.","code":""},{"path":"/reference/extract_group_types_across_schools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract unique group types across schools — extract_group_types_across_schools","text":"","code":"extract_group_types_across_schools(WondeData, verbose = TRUE)"},{"path":"/reference/extract_group_types_across_schools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract unique group types across schools — extract_group_types_across_schools","text":"WondeData named list school datasets, typically created data retrieval functions get_primary_school_student_data get_secondary_school_student_data. verbose Logical. TRUE (default), prints messages schools skipped due missing data fields.","code":""},{"path":"/reference/extract_year_codes_across_schools.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract unique year codes across schools — extract_year_codes_across_schools","title":"Extract unique year codes across schools — extract_year_codes_across_schools","text":"Wrapper extract_field_across_schools summarises year codes across schools.","code":""},{"path":"/reference/extract_year_codes_across_schools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract unique year codes across schools — extract_year_codes_across_schools","text":"","code":"extract_year_codes_across_schools(WondeData, verbose = TRUE)"},{"path":"/reference/extract_year_codes_across_schools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract unique year codes across schools — extract_year_codes_across_schools","text":"WondeData named list school datasets, typically created data retrieval functions get_primary_school_student_data get_secondary_school_student_data. verbose Logical. TRUE (default), prints messages schools skipped due missing data fields.","code":""},{"path":"/reference/filter_WondeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Wonde raw data — filter_WondeData","title":"Filter Wonde raw data — filter_WondeData","text":"Restricts raw Wonde data students, teachers, classes meet user-defined filtering criteria year group subject. Designed generalise across primary secondary school datasets.","code":""},{"path":"/reference/filter_WondeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Wonde raw data — filter_WondeData","text":"","code":"filter_WondeData(   WondeData,   student_filter = NULL,   subject_filter = NULL,   year_fallback_column = \"year.data.code\",   fallback_codes = NULL,   verbose = TRUE )"},{"path":"/reference/filter_WondeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Wonde raw data — filter_WondeData","text":"WondeData list raw Wonde data, element represents single school's extracted dataset Wonde. student_filter Optional function applied `education_details` element school list, returning student IDs keep. function return character vector IDs. subject_filter Optional function applied `subjects` element school list, returning either logical vector IDs keep. Use retain data specific subjects, Mathematics. year_fallback_column character string naming column `student` data contains year code information. Used identify students `education_details` IDs match. Defaults `\"year.data.code\"`. fallback_codes Optional character vector values used matching `year_fallback_column` students returned `student_filter`. example, `c(\"R\", \"Reception\")`. verbose Logical; `TRUE`, displays progress messages filtering.","code":""},{"path":"/reference/filter_WondeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Wonde raw data — filter_WondeData","text":"list filtered Wonde data objects. element contain relevant students, teachers, classes. returned list also includes attribute named `\"issue_list\"`, records schools fallback rules applied.","code":""},{"path":"/reference/filter_primary_WondeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Primary Wonde Data by Year — filter_primary_WondeData","title":"Filter Primary Wonde Data by Year — filter_primary_WondeData","text":"Filters primary Wonde raw data include students, classes, teachers belonging selected National Curriculum year (example Reception Year 1).","code":""},{"path":"/reference/filter_primary_WondeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Primary Wonde Data by Year — filter_primary_WondeData","text":"","code":"filter_primary_WondeData(   WondeData,   years = c(\"0\", \"R\", \"Reception\"),   fallback_codes = NULL,   verbose = TRUE )"},{"path":"/reference/filter_primary_WondeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Primary Wonde Data by Year — filter_primary_WondeData","text":"WondeData list raw Wonde data (one element per school). years Character vector year identifiers filter , example `c(\"0\", \"R\", \"Reception\")`. fallback_codes Optional vector fallback year codes use IDs align. `NULL`, defaults `years`. verbose Logical; whether print progress messages.","code":""},{"path":"/reference/filter_primary_WondeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Primary Wonde Data by Year — filter_primary_WondeData","text":"filtered list Wonde data, `\"issue_list\"` attribute noting schools fallbacks used.","code":""},{"path":"/reference/filter_primary_WondeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Primary Wonde Data by Year — filter_primary_WondeData","text":"","code":"if (FALSE) { # \\dontrun{ reception_data <- filter_primary_WondeData(   primary_data_raw,   years = c(\"0\", \"R\", \"Reception\") ) } # }"},{"path":"/reference/filter_secondary_WondeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Secondary Wonde Data by Year and Subject — filter_secondary_WondeData","title":"Filter Secondary Wonde Data by Year and Subject — filter_secondary_WondeData","text":"Filters secondary Wonde raw data include students teachers selected years (optionally) given subject area.","code":""},{"path":"/reference/filter_secondary_WondeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Secondary Wonde Data by Year and Subject — filter_secondary_WondeData","text":"","code":"filter_secondary_WondeData(   WondeData,   years = c(\"7\", \"12\"),   subject_names = NULL,   subject_desc = NULL,   fallback_codes = NULL,   verbose = TRUE )"},{"path":"/reference/filter_secondary_WondeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Secondary Wonde Data by Year and Subject — filter_secondary_WondeData","text":"WondeData list raw Wonde data (one element per school). years Character vector year identifiers filter (example `c(\"7\",\"12\")`). subject_names Optional character vector subject names match (case-insensitive). subject_desc Optional character vector subject descriptions match names fail. fallback_codes Optional fallback year codes mismatched ID cases. `NULL`, defaults `years`. verbose Logical; whether print progress messages.","code":""},{"path":"/reference/filter_secondary_WondeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Secondary Wonde Data by Year and Subject — filter_secondary_WondeData","text":"filtered list Wonde data, `\"issue_list\"` attribute noting schools fallbacks used.","code":""},{"path":"/reference/filter_secondary_WondeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Secondary Wonde Data by Year and Subject — filter_secondary_WondeData","text":"","code":"if (FALSE) { # \\dontrun{ maths_data <- filter_secondary_WondeData(   secondary_data_raw,   years = c(\"7\", \"12\"),   subject_names = c(\"Maths\", \"Mathematics\", \"Ma\") ) } # }"},{"path":"/reference/get_class_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate class sizes from a class list — get_class_sizes","title":"Calculate class sizes from a class list — get_class_sizes","text":"Summarises number students class school, based provided class list data frame. function typically used check class distribution detect unusually large small classes.","code":""},{"path":"/reference/get_class_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate class sizes from a class list — get_class_sizes","text":"","code":"get_class_sizes(class_list)"},{"path":"/reference/get_class_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate class sizes from a class list — get_class_sizes","text":"class_list data frame containing least following columns: `School name` – name school `Class Name` – class name identifier `Pupil First Name` – first name student","code":""},{"path":"/reference/get_class_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate class sizes from a class list — get_class_sizes","text":"tibble (grouped data frame) three columns: `School name` school name. `Class Name` class name. `Students` number students class.","code":""},{"path":"/reference/get_class_sizes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate class sizes from a class list — get_class_sizes","text":"function groups rows `School name` `Class Name` counts number student entries based `Pupil First Name` column. lightweight summary tool intended quality checks class list data.","code":""},{"path":"/reference/get_class_sizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate class sizes from a class list — get_class_sizes","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage class_sizes <- get_class_sizes(class_list_df) print(class_sizes) } # }"},{"path":"/reference/get_primary_school_student_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve School Student and Staff Data from Wonde API — get_primary_school_student_data","title":"Retrieve School Student and Staff Data from Wonde API — get_primary_school_student_data","text":"Retrieves detailed student, staff, class information Wonde API either primary secondary schools. functions serve wrappers around Wonde v1.0 API return structured data frames students, staff, relationships classes, subjects, groups. functions now include education details.","code":""},{"path":"/reference/get_primary_school_student_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve School Student and Staff Data from Wonde API — get_primary_school_student_data","text":"","code":"get_primary_school_student_data(school_id, KEY = \"\", verbose = TRUE)  get_secondary_school_student_data(school_id, KEY = \"\", verbose = TRUE)"},{"path":"/reference/get_primary_school_student_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve School Student and Staff Data from Wonde API — get_primary_school_student_data","text":"school_id Character string giving Wonde school ID. KEY Character string; Wonde API key used authentication. verbose Logical; TRUE (default), prints progress messages console data fetched.","code":""},{"path":"/reference/get_primary_school_student_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve School Student and Staff Data from Wonde API — get_primary_school_student_data","text":"named list data frames, typically including: `student` – basic student school info. `students_group` – student-group relationships. `students_classes` – student-class relationships staff assignments. `subjects` – available subjects (mainly secondary). `staff` – employee information groups. `education_details` – student education information.","code":""},{"path":"/reference/get_primary_school_student_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve School Student and Staff Data from Wonde API — get_primary_school_student_data","text":"function performs several authenticated API requests Wonde given `school_id`, assembling structured data : **school info** – name, URN, establishment number, phase education. **staff (employees)** – teacher employee data, including group memberships. **students (basic info)** – student-level data, including year group. **students + classes** – student-class relationships associated staff. **students + groups** – student group memberships related employees. **subjects** – subject-level metadata (typically secondary ). **education details** – student education information (available primary secondary schools). functions rely internal helpers: `get_query()` – handles paginated API requests. `convert_list_element_to_df()` – flattens nested list structures. missing NULL components removed automatically returning.","code":""},{"path":[]},{"path":"/reference/get_primary_school_student_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve School Student and Staff Data from Wonde API — get_primary_school_student_data","text":"","code":"if (FALSE) { # \\dontrun{ # Primary school data primary_data <- get_primary_school_student_data(   school_id = \"A123456789\",   KEY = Sys.getenv(\"WONDE_API_KEY\") )  # Secondary school data secondary_data <- get_secondary_school_student_data(   school_id = \"B987654321\",   KEY = Sys.getenv(\"WONDE_API_KEY\") )  # Check available data sets names(primary_data) names(secondary_data) } # }"},{"path":"/reference/get_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull from Wonde API (with error handling) — get_query","title":"Pull from Wonde API (with error handling) — get_query","text":"Safely queries Wonde API endpoint, handling pagination, authentication, potential access parsing errors. endpoint inaccessible returns data (e.g., 0 rows × 0 columns), function returns `NULL` instead stopping execution.","code":""},{"path":"/reference/get_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull from Wonde API (with error handling) — get_query","text":"","code":"get_query(url_path, filter = \"\", KEY = \"\")"},{"path":"/reference/get_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull from Wonde API (with error handling) — get_query","text":"url_path API endpoint query. filter Additional parameters include request (e.g., `&include=groups`). KEY Wonde API access token.","code":""},{"path":"/reference/get_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull from Wonde API (with error handling) — get_query","text":"combined `data.frame` pulled information data returned, otherwise `NULL` endpoint accessed contains records.","code":""},{"path":"/reference/get_query.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pull from Wonde API (with error handling) — get_query","text":"function automatically paginates available pages results concatenates single data frame using `rbind_aggro()`. endpoint inaccessible (e.g., insufficient permissions, invalid ID) returns empty result, `NULL` returned downstream code can gracefully skip processing.","code":""},{"path":[]},{"path":"/reference/get_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull from Wonde API (with error handling) — get_query","text":"","code":"if (FALSE) { school_id <- \"Enter_ID_here\" KEY <- \"Enter_KEY_here\"  # Employee information url_path <- paste0(\"https://api.wonde.com/v1.0/schools/\", school_id, \"/employees/\") employees <- get_query(url_path, filter = '&include=groups', KEY = KEY)  if (!is.null(employees)) {   employees_groups <- employees |>     convert_list_element_to_df(column_to_unnest = 'groups.data') |>     tidyr::unnest(groups.data, names_sep = '__', keep_empty = TRUE) } }"},{"path":"/reference/get_students_from_school.html","id":null,"dir":"Reference","previous_headings":"","what":"Get students from a school — get_students_from_school","title":"Get students from a school — get_students_from_school","text":"Extracts student data given school name supplied Wonde dataset.","code":""},{"path":"/reference/get_students_from_school.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get students from a school — get_students_from_school","text":"","code":"get_students_from_school(SchoolName, WondeData, schools)"},{"path":"/reference/get_students_from_school.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get students from a school — get_students_from_school","text":"SchoolName Character. name school retrieve students . WondeData List. list object containing school-level Wonde data (directly used retained consistency). schools Data frame. table mapping school names unique IDs (must include columns `id` `name`).","code":""},{"path":"/reference/get_students_from_school.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get students from a school — get_students_from_school","text":"tibble containing student information following columns: `school_name`, `forename`, `surname`, `legal_forename`, `legal_surname`, `date_of_birth.date`, `year.data.name`.","code":""},{"path":"/reference/get_students_from_school.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get students from a school — get_students_from_school","text":"function matches provided `SchoolName` corresponding `id` `schools` table, selects relevant student information `secondary_data_raw` school.","code":""},{"path":"/reference/get_students_from_school.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get students from a school — get_students_from_school","text":"","code":"if (FALSE) { # \\dontrun{ get_students_from_school(   SchoolName = \"Springfield High School\",   WondeData = secondary_data_raw,   schools = schools_list ) } # }"},{"path":"/reference/produce_class_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce final formatted class lists from cleaned student data — produce_class_lists","title":"Produce final formatted class lists from cleaned student data — produce_class_lists","text":"Aggregates cleaned student, class, teacher data single standardized class list suitable reporting export. student appears per school, associated class, teacher, unique identifiers. Default values used missing teacher names, student names converted title case.","code":""},{"path":"/reference/produce_class_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce final formatted class lists from cleaned student data — produce_class_lists","text":"","code":"produce_class_lists(   data,   class_name_column = \"ClassName\",   default_teacher = \"Reception teacher\",   default_teacher_FN = \"Reception\",   default_teacher_SN = \"Teacher\" )"},{"path":"/reference/produce_class_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce final formatted class lists from cleaned student data — produce_class_lists","text":"data data frame containing student class information. Must include least columns `SchoolId`, `StudentId`, `SchoolName`, `URN`, class name column specified `class_name_column`, teacher student name fields `TeacherName`, `TeacherForeName`, `TeacherSurName`, `StudentFirstName`, `StudentLastName`, `DoB`, `UPN`. class_name_column Character string specifying column use class names. Default `\"ClassName\"`, `\"class_name_use\"` recommended using `clean_class_names()`. default_teacher Character string giving default main teacher name records missing teacher information. Default `\"Reception teacher\"`. default_teacher_FN Character string giving default teacher first name. Default `\"Reception\"`. default_teacher_SN Character string giving default teacher surname. Default `\"Teacher\"`.","code":""},{"path":"/reference/produce_class_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce final formatted class lists from cleaned student data — produce_class_lists","text":"data frame containing one row per student following columns: `School name` school name. `URN` Unique reference number school. `Class Name` class name used downstream processing. `Main Teacher Name` Teacher responsible class, defaults   used missing. `Pupil First Name` student's first name (title-cased). `Pupil Last Name` student's surname (title-cased). `DoB` student's date birth. `UPN` unique pupil number ID available. `Main Teacher First Name` main teacher's first name. `Main Teacher Last Name` main teacher's surname.","code":""},{"path":"/reference/produce_class_lists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produce final formatted class lists from cleaned student data — produce_class_lists","text":"function typically final step class list processing pipeline, functions `clean_class_names()` `reduce_to_best_teacher()`. merges multiple records per student single entries, applies formatting default values, returns clean, human-readable data frame.","code":""},{"path":"/reference/produce_class_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce final formatted class lists from cleaned student data — produce_class_lists","text":"","code":"if (FALSE) { # \\dontrun{ final_list <- produce_class_lists(   data = cleaned_data,   class_name_column = \"class_name_use\" ) head(final_list) } # }"},{"path":"/reference/rbind_aggro.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine data frames with non-identical columns — rbind_aggro","title":"Combine data frames with non-identical columns — rbind_aggro","text":"Safely combines list data frames may different column names, missing columns, contain NULL empty elements. missing columns added data frame (filled `NA`) applying `rbind()`. NULL empty data frames skipped automatically.","code":""},{"path":"/reference/rbind_aggro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine data frames with non-identical columns — rbind_aggro","text":"","code":"rbind_aggro(list_of_data.frames, warn_on_skip = TRUE)"},{"path":"/reference/rbind_aggro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine data frames with non-identical columns — rbind_aggro","text":"list_of_data.frames list data frames combine. NULL zero-row data frames ignored. warn_on_skip Logical, default `TRUE`. `TRUE`, prints informative messages NULL empty data frames skipped.","code":""},{"path":"/reference/rbind_aggro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine data frames with non-identical columns — rbind_aggro","text":"single data frame containing rows unique columns input list. Missing columns filled `NA`. valid data frames present, returns empty data frame.","code":""},{"path":"/reference/rbind_aggro.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine data frames with non-identical columns — rbind_aggro","text":"function identifies unique column names across data frames `list_of_data.frames`, ensures columns (adding missing columns filled `NA`), performs row bind. function : Remove NULL elements combining. Remove data frames zero rows. Optionally print message skipped element         `warn_on_skip = TRUE`. Return empty data frame nothing valid remains.","code":""},{"path":"/reference/rbind_aggro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine data frames with non-identical columns — rbind_aggro","text":"","code":"df1 <- data.frame(a = 1:3, b = 4:6) df2 <- data.frame(a = 7:8, c = c(\"x\", \"y\")) df3 <- NULL  result <- rbind_aggro(list(df1, df2, df3)) #> rbind_aggro: Skipping 1 NULL data frame(s). print(result) #>   a  b    c #> 1 1  4 <NA> #> 2 2  5 <NA> #> 3 3  6 <NA> #> 4 7 NA    x #> 5 8 NA    y"},{"path":"/reference/reduce_to_best_teacher.html","id":null,"dir":"Reference","previous_headings":"","what":"Reduce duplicated student-teacher records to best (main) teacher — reduce_to_best_teacher","title":"Reduce duplicated student-teacher records to best (main) teacher — reduce_to_best_teacher","text":"Filters class list data frame keep one record per student, prioritizing associated main teacher. multiple records exist student, record marked `MainTeacher == TRUE` retained. Students without main teacher entry kept using first available record.","code":""},{"path":"/reference/reduce_to_best_teacher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reduce duplicated student-teacher records to best (main) teacher — reduce_to_best_teacher","text":"","code":"reduce_to_best_teacher(data)"},{"path":"/reference/reduce_to_best_teacher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reduce duplicated student-teacher records to best (main) teacher — reduce_to_best_teacher","text":"data data frame containing least columns `StudentId` `MainTeacher`. `MainTeacher` column logical (`TRUE` main teacher, `FALSE` otherwise).","code":""},{"path":"/reference/reduce_to_best_teacher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reduce duplicated student-teacher records to best (main) teacher — reduce_to_best_teacher","text":"data frame reduced one record per student, preferring main teacher entries available.","code":""},{"path":"/reference/reduce_to_best_teacher.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reduce duplicated student-teacher records to best (main) teacher — reduce_to_best_teacher","text":"function performs following steps: Replaces missing (`NA`) values `MainTeacher` `FALSE`. Splits dataset two subsets: one main teachers one         teachers. student, keeps main teacher record available;         otherwise keeps first non-main-teacher record. Warns total number unique students decreases         filtering (may indicate inconsistent malformed data). function typically used joining student-class-teacher data producing summary class lists functions `produce_class_lists()`.","code":""},{"path":"/reference/reduce_to_best_teacher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reduce duplicated student-teacher records to best (main) teacher — reduce_to_best_teacher","text":"","code":"if (FALSE) { # \\dontrun{ reduced <- reduce_to_best_teacher(class_list_df) } # }"},{"path":"/reference/remove_school_from_class_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove schools from class list — remove_school_from_class_list","title":"Remove schools from class list — remove_school_from_class_list","text":"Removes records (rows) class list belong one specified schools, identified either name, URN, . function useful manually excluding schools included analysis reporting. least one school_names URNs must provided.","code":""},{"path":"/reference/remove_school_from_class_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove schools from class list — remove_school_from_class_list","text":"","code":"remove_school_from_class_list(   data,   school_names = NULL,   URNs = NULL,   SchoolNameColumn = \"School name\",   URNColumn = \"URN\",   verbose = FALSE )"},{"path":"/reference/remove_school_from_class_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove schools from class list — remove_school_from_class_list","text":"data data frame containing class list. school_names character vector school names remove (optional). URNs character numeric vector URNs remove (optional). SchoolNameColumn name column containing school names (default: \"School name\"). URNColumn name column containing URNs (default: \"URN\"). verbose Logical; TRUE, prints summary message removals performed.","code":""},{"path":"/reference/remove_school_from_class_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove schools from class list — remove_school_from_class_list","text":"updated data frame rows specified schools removed.","code":""},{"path":"/reference/remove_school_from_class_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove schools from class list — remove_school_from_class_list","text":"","code":"if (FALSE) { # \\dontrun{ # Remove by school name updated_class_list <- remove_school_from_class_list(   data = class_list,   school_names = c(\"Greenfield Primary School\", \"Hillside Academy\") )  # Remove by URN updated_class_list <- remove_school_from_class_list(   data = class_list,   URNs = c(123456, 987654) )  # Remove by both updated_class_list <- remove_school_from_class_list(   data = class_list,   school_names = \"Riverside Primary\",   URNs = 123456 ) } # }"},{"path":"/reference/revert_ignored_withdrawals.html","id":null,"dir":"Reference","previous_headings":"","what":"Revert ignored withdrawals — revert_ignored_withdrawals","title":"Revert ignored withdrawals — revert_ignored_withdrawals","text":"function removes withdrawal flag restores identifying fields students previously marked withdrawn flagged ignored (.e., `IgnoreResult == \"Y\"` `withdraw` table).","code":""},{"path":"/reference/revert_ignored_withdrawals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Revert ignored withdrawals — revert_ignored_withdrawals","text":"","code":"revert_ignored_withdrawals(class_list, withdraw)"},{"path":"/reference/revert_ignored_withdrawals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Revert ignored withdrawals — revert_ignored_withdrawals","text":"class_list data frame class list data (returned [apply_withdrawn()]). withdraw data frame withdrawal results (returned [apply_withdrawn()]), containing columns `classListIndex` `IgnoreResult`.","code":""},{"path":"/reference/revert_ignored_withdrawals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Revert ignored withdrawals — revert_ignored_withdrawals","text":"updated version `class_list` withdrawal flags identifying fields (`Withdrawn?`, `DoB`, `UPN`, `Print ID`, `OME_ID`) restored ignored records.","code":""},{"path":"/reference/revert_ignored_withdrawals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Revert ignored withdrawals — revert_ignored_withdrawals","text":"every row `withdraw` `IgnoreResult == \"Y\"` valid `classListIndex` exists, function: Sets `Withdrawn?` back `\"\"` Restores (clears) blank fields (`DoB`, `UPN`, `Print ID`, `OME_ID`)     `NA` appropriate.","code":""},{"path":"/reference/revert_ignored_withdrawals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Revert ignored withdrawals — revert_ignored_withdrawals","text":"","code":"if (FALSE) { # \\dontrun{ updated_class_list <- revert_ignored_withdrawals(class_list, withdraw) } # }"},{"path":"/reference/summarise_class_sizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Class Sizes and Percent of School Population — summarise_class_sizes","title":"Summarise Class Sizes and Percent of School Population — summarise_class_sizes","text":"Groups class list school class calculate: total number students class (class size). total number students school. percentage school's students belong class. Optionally counts unique students ID (e.g. `\"UPN\"` `\"ID\"`).","code":""},{"path":"/reference/summarise_class_sizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Class Sizes and Percent of School Population — summarise_class_sizes","text":"","code":"summarise_class_sizes(   class_list,   school_name_col = \"School name\",   urn_col = \"URN\",   class_col = \"Class Name\",   pupil_col = \"Pupil First Name\",   unique_id_col = NULL )"},{"path":"/reference/summarise_class_sizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Class Sizes and Percent of School Population — summarise_class_sizes","text":"class_list data frame containing least columns: `\"School name\"`, `\"URN\"`, `\"Class Name\"`, `\"Pupil First Name\"`. school_name_col Column name school names. Default: `\"School name\"`. urn_col Column name school URNs. Default: `\"URN\"`. class_col Column name class names. Default: `\"Class Name\"`. pupil_col Column name pupil names (used unique ID column provided). Default: `\"Pupil First Name\"`. unique_id_col (Optional) Column name uniquely identifying students (e.g., `\"UPN\"` `\"ID\"`). provided present `class_list`, counts students per class use distinct values column. `NULL` (default), row assumed represent one student.","code":""},{"path":"/reference/summarise_class_sizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Class Sizes and Percent of School Population — summarise_class_sizes","text":"tibble one row per class, containing: School name School name. URN Unique reference number school. Class Name Name class. StudentsInClass Number students class. TotalStudentsInSchool Total number students school. PercentOfSchool Percentage school's total students class.","code":""},{"path":"/reference/summarise_class_sizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise Class Sizes and Percent of School Population — summarise_class_sizes","text":"","code":"if (FALSE) { # \\dontrun{ summarise_class_sizes(class_list_df) summarise_class_sizes(class_list_df, unique_id_col = \"UPN\") } # }"},{"path":"/reference/summarise_school_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise school-level data extracted from Wonde API — summarise_school_data","title":"Summarise school-level data extracted from Wonde API — summarise_school_data","text":"Processes list Wonde school extracts produces summary table showing year group availability, subject detection, student counts, data part coverage school. Designed work data returned get_secondary_school_student_data().","code":""},{"path":"/reference/summarise_school_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise school-level data extracted from Wonde API — summarise_school_data","text":"","code":"summarise_school_data(   schools,   WondeData,   year_codes_target = c(\"7\", \"Year 7\", \"07\", \"Year 07\", \"Y7\", \"Yr7\", \"Yr 7\"),   subject_keywords = c(\"Maths\", \"Mathematics\", \"Ma\", \"Mathematic\",     \"Mathematics (Assessment+)\") )"},{"path":"/reference/summarise_school_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise school-level data extracted from Wonde API — summarise_school_data","text":"schools Data frame containing school metadata (must include least URN, id, name columns). WondeData Named list school data extracts (returned get_secondary_school_student_data()). year_codes_target Character vector year codes used identify target year group (default includes multiple Year 7 code variations). subject_keywords Character vector subject name patterns identify relevant subjects (default identifies Maths-related names).","code":""},{"path":"/reference/summarise_school_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise school-level data extracted from Wonde API — summarise_school_data","text":"data frame containing school-level summaries including: year_code_values: available year codes extract HasTargetYear: whether target year group present target_year_subjects: subjects available target year GetSubjectByCode: detection target subject subject code class_desc_target_year: available class descriptions target year GetSubjectByClassDescription: detection subject class description total_students: total number students school total_target_year_students: total number students target year group Logical indicators data parts successfully extracted     (e.g. student, subjects, staff, etc.)","code":""},{"path":"/reference/summarise_school_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise school-level data extracted from Wonde API — summarise_school_data","text":"function checks structure school's data extract, detects presence user-specified year group subjects, identifies whether relevant Wonde endpoints available. robust missing incomplete data merges derived summaries back supplied schools data frame.","code":""},{"path":"/reference/summarise_school_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise school-level data extracted from Wonde API — summarise_school_data","text":"","code":"if (FALSE) { summary_df <- summarise_school_data(   schools = schools,   WondeData = secondary_data_raw,   year_codes_target = c(\"7\", \"Year 7\"),   subject_keywords = c(\"Maths\", \"Mathematics\") )  head(summary_df) }"},{"path":"/reference/summarise_small_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Small Classes by School — summarise_small_classes","title":"Summarise Small Classes by School — summarise_small_classes","text":"Groups class list school summarises occurrence small classes, defined classes number students less equal `threshold`. school, function reports: total number classes school. number classes ≤ `threshold` students. total number students small classes. sizes small classes (comma-separated). percentage students school small classes.","code":""},{"path":"/reference/summarise_small_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Small Classes by School — summarise_small_classes","text":"","code":"summarise_small_classes(   class_list,   school_name_col = \"School name\",   urn_col = \"URN\",   class_col = \"Class Name\",   pupil_col = \"Pupil First Name\",   unique_id_col = NULL,   threshold = 3 )"},{"path":"/reference/summarise_small_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Small Classes by School — summarise_small_classes","text":"class_list data frame containing least columns: `\"School name\"`, `\"URN\"`, `\"Class Name\"`, `\"Pupil First Name\"`. school_name_col Column name school names. Default: `\"School name\"`. urn_col Column name school URNs. Default: `\"URN\"`. class_col Column name class names. Default: `\"Class Name\"`. pupil_col Column name pupil names (used unique ID column provided). Default: `\"Pupil First Name\"`. unique_id_col (Optional) Column name uniquely identifying students (e.g., `\"UPN\"` `\"ID\"`). provided present `class_list`, counts students per class use distinct values column. `NULL` (default), row assumed represent one student. threshold Numeric. maximum class size considered \"small\". Default: `3`.","code":""},{"path":"/reference/summarise_small_classes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Small Classes by School — summarise_small_classes","text":"tibble summarising, school: School name School name. URN Unique reference number school. TotalClasses Number classes school. SmallClasses Number classes ≤ `threshold` students. StudentsInSmallClasses Total students small classes. SmallClassSizes Comma-separated sizes small classes. TotalStudents Total number students across classes. PercentInSmallClasses Percentage students small classes.","code":""},{"path":"/reference/summarise_small_classes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise Small Classes by School — summarise_small_classes","text":"","code":"if (FALSE) { # \\dontrun{ summarise_small_classes(class_list_df) summarise_small_classes(class_list_df, unique_id_col = \"UPN\", threshold = 5) } # }"},{"path":"/news/index.html","id":"wondecl-010","dir":"Changelog","previous_headings":"","what":"WondeCL 0.1.0","title":"WondeCL 0.1.0","text":"Initial CRAN submission.","code":""}]
